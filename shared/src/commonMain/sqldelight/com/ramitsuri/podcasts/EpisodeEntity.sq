import kotlin.Boolean;
import kotlin.Int;

CREATE TABLE IF NOT EXISTS EpisodeEntity (
    id TEXT NOT NULL PRIMARY KEY,
    podcastId INTEGER NOT NULL,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    link TEXT NOT NULL,
    enclosureUrl TEXT NOT NULL,
    datePublished INTEGER NOT NULL,
    duration INTEGER AS Int,
    explicit INTEGER AS Boolean NOT NULL,
    episode INTEGER AS Int,
    season INTEGER AS Int
);

CREATE VIEW dbEpisode AS
SELECT ee.*,
eaie.playProgress, eaie.downloadStatus, eaie.downloadProgress, eaie.downloadBlocked, eaie.queuePosition, eaie.completedAt, eaie.downloadedAt, eaie.isFavorite, eaie.needsDownload,
pe.title AS podcastTitle, pe.author AS podcastAuthor, pe.artwork AS podcastImageUrl, pe.link AS podcastLink, pe.url AS podcastUrl
FROM EpisodeEntity AS ee
INNER JOIN PodcastEntity AS pe
    ON ee.podcastId == pe.id
INNER JOIN EpisodeAdditionalInfoEntity AS eaie
    ON ee.id == eaie.id;

getEpisode:
SELECT * FROM dbEpisode
WHERE id == :id;

getMaxEpisodeDatePublishedForPodcast:
SELECT MAX(datePublished) AS maxDatePublished
FROM dbEpisode
WHERE podcastId == :podcastId;

getEpisodesForPodcast:
SELECT * FROM dbEpisode
WHERE podcastId == :podcastId
AND CASE WHEN :showCompleted = 1 THEN 1 ELSE completedAt IS NULL END
AND (title LIKE '%' || :query || '%' OR description LIKE '%' || :query || '%')
ORDER BY datePublished DESC
LIMIT :limit;

getEpisodesForPodcastAsc:
SELECT * FROM dbEpisode
WHERE podcastId == :podcastId
AND CASE WHEN :showCompleted = 1 THEN 1 ELSE completedAt IS NULL END
AND (title LIKE '%' || :query || '%' OR description LIKE '%' || :query || '%')
ORDER BY datePublished ASC
LIMIT :limit;

getEpisodesForPodcasts:
SELECT * FROM dbEpisode
WHERE podcastId IN :podcastIds
AND CASE WHEN :showCompleted = 1 THEN 1 ELSE completedAt IS NULL END
ORDER BY datePublished DESC
LIMIT :limit;

getRemovableEpisodes:
SELECT id, podcastId FROM dbEpisode
WHERE
podcastId IN :podcastIds
AND
downloadStatus == "not_downloaded"
AND
queuePosition == -1
AND
isFavorite == 0;

getEpisodesInQueue:
SELECT * FROM dbEpisode
WHERE queuePosition != -1
ORDER BY queuePosition ASC;

getDownloadedEpisodes:
SELECT * FROM dbEpisode
WHERE downloadStatus == "downloaded"
ORDER BY downloadedAt DESC;

getFavoriteEpisodes:
SELECT * FROM dbEpisode
WHERE isFavorite == 1;

getNeedDownloadEpisodes:
SELECT * FROM dbEpisode
WHERE needsDownload == 1;

getEpisodeCountForPodcast:
SELECT COUNT(*) AS count
FROM dbEpisode
WHERE podcastId == :podcastId;

getEpisodeCountForPodcasts:
SELECT COUNT(*) AS count
FROM dbEpisode
WHERE podcastId IN :podcastIds;

insertOrReplace:
INSERT OR REPLACE INTO
EpisodeEntity(id, podcastId, title, description, link, enclosureUrl, datePublished, duration, explicit, episode, season)
VALUES ?;

updateDuration:
UPDATE EpisodeEntity
SET duration = :duration
WHERE id = :id;

remove:
DELETE FROM EpisodeEntity
WHERE id IN :episodeIds;

getPodcastsThatHaveEpisodes:
SELECT DISTINCT podcastId
FROM dbEpisode
WHERE podcastId IN :podcastIds;

getUpdated:
SELECT COUNT(*) AS count FROM dbEpisode;

getEpisodes:
SELECT * FROM dbEpisode
WHERE id IN :episodeIds;
