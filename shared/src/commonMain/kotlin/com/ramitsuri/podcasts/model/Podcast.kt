package com.ramitsuri.podcasts.model

import com.ramitsuri.podcasts.DbPodcast
import com.ramitsuri.podcasts.network.model.PodcastDto
import kotlinx.datetime.Instant

data class Podcast(
    val id: Long,
    val guid: String,
    val title: String,
    val description: String,
    val author: String,
    val owner: String,
    val url: String,
    val link: String,
    val image: String,
    val artwork: String,
    val explicit: Boolean,
    val episodeCount: Int,
    val categories: List<Category>,
    val subscribed: Boolean,
    val autoDownloadEpisodes: Boolean,
    val newEpisodeNotifications: Boolean,
    val subscribedDate: Instant?,
    val hasNewEpisodes: Boolean,
    val autoAddToQueue: Boolean,
    val showCompletedEpisodes: Boolean,
    val episodeSortOrder: EpisodeSortOrder,
) {
    internal constructor(dto: PodcastDto) : this(
        id = dto.id,
        guid = dto.guid,
        title = dto.title,
        description = dto.description,
        author = dto.author,
        owner = dto.owner,
        url = dto.url,
        link = dto.link,
        image = dto.image,
        artwork = dto.artwork,
        explicit = dto.explicit,
        episodeCount = dto.episodeCount,
        categories = dto.categories.map { Category(it) },
        subscribed = false,
        autoDownloadEpisodes = false,
        newEpisodeNotifications = false,
        subscribedDate = null,
        hasNewEpisodes = false,
        autoAddToQueue = false,
        showCompletedEpisodes = true,
        episodeSortOrder = EpisodeSortOrder.default,
    )

    internal constructor(dbPodcast: DbPodcast, categories: List<Category>) : this(
        id = dbPodcast.id,
        guid = dbPodcast.guid,
        title = dbPodcast.title,
        description = dbPodcast.description,
        author = dbPodcast.author,
        owner = dbPodcast.owner,
        url = dbPodcast.url,
        link = dbPodcast.link,
        image = dbPodcast.image,
        artwork = dbPodcast.artwork,
        explicit = dbPodcast.explicit,
        episodeCount = dbPodcast.episodeCount,
        categories = categories,
        subscribed = dbPodcast.subscribed,
        autoDownloadEpisodes = dbPodcast.autoDownloadEpisodes,
        newEpisodeNotifications = dbPodcast.newEpisodeNotification,
        subscribedDate = dbPodcast.subscribedDate,
        hasNewEpisodes = dbPodcast.hasNewEpisodes,
        autoAddToQueue = dbPodcast.autoAddToQueue,
        showCompletedEpisodes = dbPodcast.showCompletedEpisodes,
        episodeSortOrder = dbPodcast.episodeSortOrder,
    )
}
